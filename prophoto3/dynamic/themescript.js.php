<?php
/* ----------------------------------- */
/* --- theme javascript generation --- */
/* ----------------------------------- */


// load WordPress environmment
require_once( dirname( dirname( dirname( dirname( dirname( __FILE__ ) ) ) ) ) . '/wp-load.php' ); 

@header('Content-type: text/javascript' );
echo '// ProPhoto3 build #' . P3_SVN . "\n";
echo "// do not edit this file, it is created by the theme, any edits will be lost\n\n";

$p3_theme_url = P3_THEME_URL;
$p3_url       = P3_URL;

/* include libraries */
include( 'js/swfobject.js' );
if ( !p3_test( 'audioplayer', 'off' ) ) include( 'js/audioplayer.js' );


/* conditional functions for the ready function */
define( DO_COMMENTS, ( p3_test( 'comments_enable', 'true' ) ) );
$p3_popup_galleries       = ( p3_test( 'nav_galleries_dropdown', 'on' ) ) ? 'p3_popup_galleries();' : ''; 
$p3_handle_contact_form   = ( p3_test( 'contactform_yesno', 'yes' ) ) ? 'p3_handle_contact_form();' : '';
$p3_nav_twitter_dropdown  = ( p3_test( 'twitter_onoff', 'on' ) ) ? 'p3_nav_twitter_dropdown();' : ''; 
$p3_align_menu_center     = ( p3_test( 'nav_align', 'center' ) ) ? 'p3_align_menu_center();' : '';
$p3_nag_maintenance_mode  = ( p3_test( 'maintenance_mode', 'on' ) ) ? 'p3_nag_maintenance_mode();' : '';
$p3_show_hide_comments    = ( !p3_test( 'comments_layout', 'boxy' ) && DO_COMMENTS ) ? 'p3_show_hide_comments();' : '';
$p3_minima_count_hover    = ( p3_test( 'comments_layout', 'minima' ) && DO_COMMENTS ) ? 'p3_minima_count_hover();' : '';
$p3_ajax_add_comment      = ( DO_COMMENTS ) ? 'p3_ajax_add_comment();' : '';
$p3_ajax_cmt_submit_error = ( DO_COMMENTS ) ? 'p3_ajax_cmt_submit_error();' : '';
$p3_nav_menu_opacity      = ( p3_get_option( 'nav_dropdown_opacity' ) < 100 ) ? 'p3_nav_menu_opacity();' : '';
$p3_statcounter_format    = ( p3_test( 'statcounter_code' ) ) ? "jQuery('#statcounter-wrapper br').remove();" : '';
$p3_image_protection      = ( !p3_test( 'image_protection', 'none' ) ) ? 'p3_image_protection();' : '';
$p3_sidebar_drawers       = ( p3_using_sidebar_drawers() ) ? 'p3_sidebar_drawers();' : '';
$p3_audioplayer_embed     = ( p3_test( 'audioplayer', 'off' ) ) ? '' : 'p3_audioplayer_embed();'; 
$p3_click_hidden_bio      = ( p3_test( 'use_hidden_bio', 'yes' ) || p3_test( 'bio_pages_minimize', 'minimized' ) ) ? 'p3_click_hidden_bio();' : '';


/* some global vars for iphone/ipad identification */
echo "\n\n" . <<<JAVASCRIPT
var is_ipad = ( navigator.platform == "iPad" );
var is_iphone = ( navigator.platform == "iPhone" );
var isTouchDevice = ( "ontouchstart" in document.documentElement );
JAVASCRIPT;


/* ---------- ready function --------- */
echo "\n\n" . <<<JAVASCRIPT
jQuery(document).ready(function(){

	// general functions
	$p3_image_protection
	p3_embed_flash_galleries();
	p3_lightbox_gallery();
	$p3_popup_galleries
	$p3_handle_contact_form
	$p3_nag_maintenance_mode
	$p3_click_hidden_bio

	// menu functions
	p3_format_nav_menu();
	$p3_nav_menu_opacity
	$p3_align_menu_center

	// comment functions
	$p3_ajax_add_comment
	$p3_ajax_cmt_submit_error
	$p3_show_hide_comments
	$p3_minima_count_hover

	// widgets
	p3_widgets();
	$p3_sidebar_drawers

	// misc
	jQuery('.post:last').addClass('last-post');
	jQuery('a.no-link').click(function(){return false;});
	$p3_nav_twitter_dropdown
	$p3_statcounter_format
	$p3_audioplayer_embed
});


JAVASCRIPT;


/* popup windows for js galleries */
if ( p3_test( 'nav_galleries_dropdown', 'on' ) ) {
	echo "\n\n" . <<<JAVASCRIPT
	function p3_popup_galleries() {
		if ( isTouchDevice ) return true;
		jQuery('#navlink_galleries li a').click(function(){
			var clicked = jQuery(this);
			var parameters = "location=0,menubar=0,height=" + jQuery('.height', clicked).text() + ",width=" + jQuery('.width', clicked).text() + ",toolbar=0,scrollbars=0,status=0,resizable=0,left=20,screenX=20,top=20,screenY=20";
			var href = clicked.attr('href');
			var sep =  ( /\?/.test(href) ) ? '&' : '?';
			window.open( href+sep+'gallery_popup=1', 'PopupWindow', parameters );
			return false;
		});
	}
JAVASCRIPT;
}

/* sidebar sliding drawers */
if ( p3_using_sidebar_drawers() ) {
	
	// drawer opacity
	$drawer_opacity = floatval( p3_get_option( 'drawer_default_opacity' ) / 100 );
	// drawer padding
	$drawer_padding =  p3_get_option( 'drawer_padding' ) * 2;

	echo "\n\n" . <<<JAVASCRIPT
	/* instrument the animations for the sidebar tabs */
	function p3_sidebar_drawers() {
		var drawer_padding = $drawer_padding;

		// set initial opacity and height of drawers
		jQuery('.drawer_content, .tab').css('opacity', $drawer_opacity);
		jQuery('.drawer_content').css('height', (jQuery(window).height() - $drawer_padding) + 'px' ); 

		// function-scoped timeout var object
		var p3_close_drawer_timeout = new Object();

		// instrument each drawer
		jQuery('.drawer').each(function(){
			var drawer = jQuery(this);
			var id     = drawer.attr('id');
			var tab    = jQuery('.tab', this);
			var width  = parseInt( jQuery('.drawer_content', drawer).css( 'width' ) ) + $drawer_padding;
			var speed  = parseInt( width * 0.75 );

			// show the drawer on tab mouseover
			tab.mouseover(function(){
				drawer
					.css( 'z-index', '10000' )
					.animate( { left:'0px' }, speed, 'swing' )
					.addClass( 'open' );
			});

			// handle iphone/ipad show/hides
			if ( isTouchDevice ) {
				jQuery('#inner-wrap').unbind('touchstart').bind('touchstart',function(){
					drawer.mouseleave();
				});
				tab.bind('touchstart',function(){
					if ( drawer.hasClass('open') ) drawer.trigger('mouseleave');
				});
			}

			// set the timeout to close drawer on mouseleave
			drawer.mouseleave(function(){
				var delay = ( isTouchDevice ) ? 1 : 1000;
				clearTimeout( p3_close_drawer_timeout[id] );
				p3_close_drawer_timeout[id] = setTimeout( function(){
					drawer.animate( { left:'-' + width + 'px' }, speed, 'swing', function(){
						drawer.css( 'z-index', '5000' ).removeClass('open');
					} );
				}, delay );
			});

			// restart the close drawer timout on mouseenter
			drawer.mouseenter(function(){
				clearTimeout( p3_close_drawer_timeout[id] );
			});
		});	
	}
JAVASCRIPT;
}


/* flash gallery embedding */
$global_settings_json = p3_static_file_url( 'json', NO_ECHO ) . p3_get_option( 'cache_buster' );
$local_settings_path  = P3_FOLDER_URL . P3_GALLERY_DIR;
$swf_cache_buster     = '?build=' . P3_SVN; 
echo "\n\n" . <<<JAVASCRIPT
function p3_embed_flash_galleries() {
	var debug_gal = ( /debug_gallery=1/.test( window.location.href ) ) ? true : false;
	jQuery('.p3-flash-gallery').each(function(){
		var id = jQuery(this).attr('id').replace('p3-flash-gallery-', '');
		var modtime    = jQuery('span.modtime', this).text();
		var gal_height = jQuery('span.gal_height', this).text();
		var gal_width  = jQuery('span.gal_width', this).text();
		var img_height = jQuery('span.img_height', this).text();
		var img_width  = jQuery('span.img_width', this).text();
		var is_popup   = ( jQuery('body').hasClass('gallery-popup') ) ? 'true' : 'false';
		var flashvars  = {
			globalSettings: '$global_settings_json',
			localSettings: '$local_settings_path/'+id+'_settings.txt?'+modtime,
			galleryHeight: gal_height,
			galleryWidth: gal_width,
			mainImageHeight: img_height,
			mainImageWidth: img_width,
			isPopup: is_popup,
			debug: debug_gal
		};
		swfobject.embedSWF(
			'$p3_theme_url/flash/gallery.swf{$swf_cache_buster}', 
			'p3-flash-gallery-'+id, 
			parseInt(gal_width), 
			parseInt(gal_height), 
			'9', 
			'$p3_theme_url/flash/expressinstall.swf', 
			flashvars,
			{ allowfullscreen: true, wmode: 'transparent' }
		);
	});
}
JAVASCRIPT;


/* conditionally call widgets functions */	
$p3_twitter_widgets_get_tweets =
	( p3_using_twitter_html_widget() ) ? 'p3_twitter_widgets_get_tweets();' : '';	
$p3_sliding_twitter_controls =
	( p3_is_active_widget( 'p3-twitter-slider' ) ) ? 'p3_sliding_twitter_controls();' : '';
echo "\n\n" . <<<JAVASCRIPT
function p3_widgets() {
	$p3_twitter_widgets_get_tweets
	$p3_sliding_twitter_controls
}
JAVASCRIPT;


/* twitter HTML - in nav dropdown and in non-flash twitter widgets */
if ( p3_using_twitter_html() ) {
	echo "\n\n" . <<<JAVASCRIPT
	// subroutine for building the list of tweets from the .json data
	function p3_twitter_html( tweets, li_height ) {
		var height = ( li_height ) ? ' style="height:'+li_height+'px;"' : '';
		var twitter_html = [];
		for ( var i = 0; i<tweets.length; i++ ) {
			var username = tweets[i].user.screen_name;
			var status = tweets[i].text.replace(/((https?|s?ftp|ssh)\:\/\/[^"\s\<\>]*[^.,;'">\:\s\<\>\)\]\!])/g, function(url) {
		 		return '<a href="'+url+'">'+url+'</a>';
			}).replace(/\B@([_a-z0-9]+)/ig, function(reply) {
		 		return  reply.charAt(0)+'<a href="http://twitter.com/'+reply.substring(1)+'">'+reply.substring(1)+'</a>';
			});
			twitter_html.push('<li'+height+'><span>'+status+'</span> <a class="twitter-time" href="http://twitter.com/'+username+'/statuses/'+tweets[i].id+'">'+p3_twitter_time(tweets[i].created_at)+'</a></li>');
		}
		return twitter_html.join('');
	}
	// subroutine for returning nicely formatted time since tweeting
	function p3_twitter_time(time_value) {
		var values = time_value.split(" ");
		time_value = values[1] + " " + values[2] + ", " + values[5] + " " + values[3];
		var parsed_date = Date.parse(time_value);
		var relative_to = (arguments.length > 1) ? arguments[1] : new Date();
		var delta = parseInt((relative_to.getTime() - parsed_date) / 1000);
		delta = delta + (relative_to.getTimezoneOffset() * 60);

		if (delta < 60) {
			return 'less than a minute ago';
		} else if (delta < 120) {
			return 'about a minute ago';
		} else if (delta < (60*60)) {
			return (parseInt(delta / 60)).toString() + ' minutes ago';
		} else if (delta < (120*60)) {
			return 'about an hour ago';
		} else if (delta < (24*60*60)) {
			return 'about ' + (parseInt(delta / 3600)).toString() + ' hours ago';
		} else if (delta < (48*60*60)) {
			return '1 day ago';
		} else {
			return (parseInt(delta / 86400)).toString() + ' days ago';
		}
	}
JAVASCRIPT;
	
	// these functions used by all twitter html widgets
	if ( p3_using_twitter_html_widget() ) {
		
		echo "\n\n" . <<<JAVASCRIPT
		// requests .json twitter info for each html widget, passes object to correct callback
		function p3_twitter_widgets_get_tweets( context ) {
			if (context == undefined) context = '';
			jQuery(context+'.p3-html-twitter-widget').each(function(){
				var twitter_name  = jQuery('.twitter_name',this).text();
				var twitter_count = jQuery('.twitter_count',this).text();
				var this_widget   = jQuery(this);
				// set context - which widget area?
				if ( this_widget.parents('#bio').length ) {
					var context = 'bio';
				} else if ( this_widget.parents('#sidebar').length ) {
					var context = 'sidebar';
				} else if ( this_widget.parents('.drawer').length ) {
					var context = 'drawer';
				} else if ( this_widget.parents('#contact-form').length ) {
					var context = 'contact';
				} else {
					var context = 'footer';
				}
				jQuery.getScript( 'http://twitter.com/statuses/user_timeline/' + twitter_name + '.json?callback=p3_'+context+'_twitter_html&count='+ twitter_count );
			});
		}
		// wrapper functions to call the twitter html function for the right widget context
		function p3_bio_twitter_html(tweets) {
			p3_load_twitter_html(tweets, '#bio');
		}
		function p3_sidebar_twitter_html(tweets) {
			p3_load_twitter_html(tweets, '#sidebar');
		}
		function p3_drawer_twitter_html(tweets) {
			p3_load_twitter_html(tweets, '.drawer');
		}
		function p3_footer_twitter_html(tweets) {
			p3_load_twitter_html(tweets, '#footer');
		}
		function p3_contact_twitter_html(tweets) {
			p3_load_twitter_html(tweets, '#contact-form');
		}
		// subroutine for printing twitter html update list in correct widget
		function p3_load_twitter_html(tweets, id) {
			var this_widget = jQuery(id+' .p3-html-twitter-widget-'+tweets[0].user.screen_name.toLowerCase());
			if ( jQuery('.tweet_height', this_widget ).length ) {
				var height = parseInt( jQuery( '.tweet_height', this_widget ).text());
			} else {
				var height = '';
			}
			jQuery('ul', this_widget ).html( p3_twitter_html( tweets, height ) );
			jQuery('.sliding .controls a', this_widget ).css('display','block');
		}
JAVASCRIPT;
	
	}

	// below function just for sliding twitter widget
	if ( p3_is_active_widget( 'p3-twitter-slider' ) ) {
		$p3_twitter_slider_js = P3_Twitter_Slider::js();
		echo "\n\n" . <<<JAVASCRIPT
		$p3_twitter_slider_js
JAVASCRIPT;
	}
	
	// just for nav menu twitter dropdown
	if ( p3_test( 'twitter_onoff', 'on' ) ) {
		$twitter_name  =  p3_get_option( 'twitter_name' );
		$twitter_count =  p3_get_option( 'twitter_count' );	
		echo "\n\n" . <<<JAVASCRIPT
		function p3_nav_twitter(tweets) {
			jQuery('#navlink_twitter ul').html(p3_twitter_html(tweets));
		}
		function p3_nav_twitter_dropdown() {
			jQuery.getScript( 'http://twitter.com/statuses/user_timeline/{$twitter_name}.json?callback=p3_nav_twitter&count={$twitter_count}' );
		}
JAVASCRIPT;
	}
	
} 


/* hidden bio click */
if ( p3_test( 'use_hidden_bio', 'yes' ) OR p3_test( 'bio_pages_minimize', 'minimized' ) ) { 
	// deal with optionally hiding page turn image for slide animation
	if ( p3_image_exists( 'bio_inner_bg' ) ) {
		$pageturn_img  = p3_imageurl( 'bio_inner_bg', NO_ECHO );
		$pageturn_pos  = p3_get_option( 'bio_inner_bg_img_position' );
		$pageturn_hide = "jQuery('#bio-inner-wrapper').css('background', 'none' );";
		$pageturn_show = "jQuery('#bio-inner-wrapper').css('background', 'url({$pageturn_img}) no-repeat $pageturn_pos');";
	}  else {
		$pageturn_hide = '';
		$pageturn_show = '';
	}
	echo "\n\n" . <<<JAVASCRIPT
	function p3_click_hidden_bio() {
		jQuery('a#hidden-bio').click(function(){
			$pageturn_hide 
			jQuery('#bio').slideToggle(350,function(){
				jQuery('#bio-inner-wrapper').css('display', 'block' );
				jQuery('#bio-content').css('display', 'block' );
				jQuery('#bio-widget-spanning-col, #bio-widget-col-wrap, .bio-col').css('display', 'block' );
				$pageturn_show
			});
		});	
	}
JAVASCRIPT;
}


/* nav dropdown opacity */
if ( p3_get_option( $nav_dropdown_opacity ) < 100 ) {
	$nav_dropdown_opacity =  p3_get_option( 'nav_dropdown_opacity' );
	echo "\n\n" . <<<JAVASCRIPT
	function p3_nav_menu_opacity() {	
		if (!jQuery.browser.msie) {	
			jQuery('#topnav li ul').css('opacity', 0.{$nav_dropdown_opacity});
		}
	}
JAVASCRIPT;
}


/* nav menu formatting */
echo "\n\n" . <<<JAVASCRIPT
function p3_format_nav_menu() {

	// remove tooltips
	jQuery('#topnav li ul a').attr('title','');
	
	// add arrow to dropdown with nested menu
	jQuery('#topnav li ul li:has(ul)').each(function(){
		var link = jQuery(this).children('a');
		var linktext = link.html();
		link.html(linktext+' &raquo;');
	});
	// add underline to parent while child is being viewed
	jQuery('#topnav li ul li ul').hover(function(){
		jQuery(this).parent().children('a').css('text-decoration','underline');
	},function(){
		jQuery(this).parent().children('a').css('text-decoration','none');
	});

	// handle iPad and iPhone
	if ( isTouchDevice ) {
		var touchstart_timeout = false;
		jQuery('#topnav li:has(ul)').bind('touchstart',function(event){
			clearTimeout(touchstart_timeout);
			var touched_link = jQuery(this);
			if (touched_link.hasClass('sfhover')) {
				event.stopPropagation();
				return true;
			}
			jQuery('#topnav li').removeClass('sfhover');
			touched_link.addClass('sfhover');
			touchstart_timeout = setTimeout(function(){
				touched_link.removeClass('sfhover');
			},6000);
			return false;
		});
		jQuery(document).bind('touchstart', function(){
			if ( jQuery('#topnav li.sfhover').length ) {
				jQuery('#topnav li').removeClass('sfhover');
			}
		});
	}
}
JAVASCRIPT;


/* minima comments layout header hovers */
if ( DO_COMMENTS && p3_test( 'comments_layout', 'minima' ) ) {
	// set hover color
	if ( p3_optional_color_bound( 'comments_header_link_hover_font_color' ) ) {
		$hover_color = p3_get_option( 'comments_header_link_hover_font_color' );
	} else if ( p3_optional_color_bound( 'comments_header_link_font_color' ) ) {
		$hover_color = p3_get_option( 'comments_header_link_font_color' );
	} else if ( p3_optional_color_bound( 'gen_link_hover_font_color' ) ) {
		$hover_color = p3_get_option( 'gen_link_hover_font_color' );
	} else {
		$hover_color = p3_get_option( 'gen_link_font_color' );
	}
	
	// set decoration style
	if ( p3_test('comments_header_link_hover_decoration' ) ) {
		$decoration = p3_get_option( 'comments_header_link_hover_decoration' );
	} else if ( p3_test('gen_link_hover_decoration' ) ) {
		$decoration = p3_get_option( 'gen_link_hover_decoration' );
	} else {
		$decoration = FALSE;
	}
	
	$new_dec = ( $decoration ) ? "'$decoration'" : 'old_dec';

	echo "\n\n" . <<<JAVASCRIPT
	function p3_minima_count_hover() {
		jQuery('.comments-count p:not(.no-comments)').mouseover(function(){
			old_hover = jQuery(this).css('color');
			old_dec = jQuery(this).css('text-decoration');
			jQuery(this).css('color', '$hover_color' );
			jQuery(this).css('text-decoration', $new_dec);
		}).mouseout(function(){
			jQuery(this).css('color', old_hover);
			jQuery(this).css('text-decoration', old_dec); 
		});
	}
JAVASCRIPT;
}


/* show/hide comments */
if ( DO_COMMENTS ) {
	echo "\n\n" . <<<JAVASCRIPT
	function p3_show_hide_comments() {
		jQuery('.comments-count').click(function(){
			var comments_section = jQuery(this).parents(".entry-comments");
			if ( jQuery('.comments-body-inner div', comments_section).length ) {
				comments_section.toggleClass('comments-count-active');
				jQuery('.comments-body', comments_section).slideToggle(400);
			}
		});
	}
JAVASCRIPT;
}



/* maintenance mode reminder */
if ( p3_test( 'maintenance_mode', 'on' ) ) {
echo "\n\n" . <<<JAVASCRIPT
function p3_nag_maintenance_mode() {
	jQuery('#maintenance-mode-remind').fadeTo(1000, 1, function(){
		jQuery(this).fadeOut(2000);
	});
}
JAVASCRIPT;
}


/* lightbox gallery */
$lightbox_thumb_opacity         =  p3_convert_percentage( p3_get_option( 'lightbox_thumb_opacity' ) );
$lightbox_thumb_mouseover_speed =  p3_get_option( 'lightbox_thumb_mouseover_speed' );
echo "\n\n" . <<<JAVASCRIPT
function p3_lightbox_gallery() {
	jQuery('.p3-lightbox-gallery').each(function(){
		jQuery('a', this).p3LightBox();
	});
	jQuery('.p3-lightbox-gallery-thumbs img').css('opacity', $lightbox_thumb_opacity).hover(function(){
		jQuery(this).stop().animate({opacity:1},{$lightbox_thumb_mouseover_speed});
	}, function(){
		jQuery(this).stop().animate({opacity:$lightbox_thumb_opacity},{$lightbox_thumb_mouseover_speed});
	});
}
JAVASCRIPT;


/* contact form */
if ( p3_test( 'contactform_yesno', 'yes' ) ) {
	$contact_success_msg = addslashes( p3_get_option( 'contact_success_msg' ) );
	$contact_error_msg   = addslashes( p3_get_option( 'contact_error_msg' ) );

	echo "\n\n" . <<<JAVASCRIPT
	var p3_form_error = false;
	function p3_validate_contact_form() {
		jQuery('#contactform input[type=text], #contactform textarea').blur(function(){
			if (!jQuery('#contactform').hasClass('submitted')) return false;
			this_field_error = false;
			var field = jQuery(this);
			if ( !field.parents('div.p3-field').hasClass('p3-required-field') ) return;
			if ( field.val() == '' || ( field.attr('id') == 'email' && !field.val().match(/^([a-zA-Z0-9_\.\-\+])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/) ) ) {
				this_field_error = p3_form_error = true;
			}
			if ( this_field_error ) field.parents('div.p3-field').addClass('p3-has-error');
			else field.parents('div.p3-field').removeClass('p3-has-error');
		});
		jQuery('#contactform').submit(function(){
			jQuery(this).addClass('submitted');
			p3_form_error = false;
			jQuery('#contactform input[type=text], #contactform textarea').blur();
			if ( p3_form_error ) return false;
		});
	}

	function p3_handle_contact_form() {
		p3_validate_contact_form();
		jQuery('#p3-nav-contact').click(function(){
			p3_toggle_contactform(500);
		});	
		var hash = window.location.hash.substr(1);
		if ( hash === 'contact-form' ) {
			p3_toggle_contactform(0);
		}
		if ( hash === 'error' ) {
			jQuery("#p3-contact-error")
				.css('display', 'block')
				.animate({opacity: 1.0}, 3500, function(){p3_toggle_contactform(300)})
				.fadeTo(500, 0)
				.slideUp(300)
				.html('<p>$contact_error_msg</p>');
		}
		if ( hash === 'success' ) {
			jQuery("#p3-contact-success")
				.css('display', 'block')
				.animate({opacity: 1.0}, 3500)
				.fadeTo(500, 0)
				.slideUp(300)
				.html('<p>$contact_success_msg</p>');
		}
		jQuery('a[href*=#contact-form]').click(function(){
			if (jQuery("#contact-form form").size() == 0 ) {
				p3_toggle_contactform();
			} else {
				jQuery('#contact-form').slideDown(500);
			}
		});
	}
JAVASCRIPT;
	
	// calculate how far down the header is from top of window
	$blog_top_offset = p3_get_option( 'blog_top_margin' );
	if ( !p3_test( 'blog_border', 'none' ) && p3_test( 'blog_border_topbottom', 'yes' ) ) {
		if ( p3_test( 'blog_border', 'dropshadow' ) )
			$blog_top_offset += ( p3_test( 'blog_border_shadow_width', 'narrow' ) ) ? DROPSHADOW_NARROW_IMG_WIDTH : DROPSHADOW_WIDE_IMG_WIDTH;
		else
			$blog_top_offset += p3_get_option( 'blog_border_width' );
	} 

	 if ( p3_test( 'contactform_ajax', 'on' ) )  {

		// Load if needed (ajax) and toggle contact form display
		echo "\n\n" . <<<JAVASCRIPT
		function p3_toggle_contactform(delay) {
			if (delay == undefined) delay = 500;
			p3_start_throb(jQuery('#p3-nav-contact'));
			jQuery('#contact-form').load('{$p3_theme_url}/includes/contact-form.php?ajax=1', function(){
				if ( jQuery('#contact-form .p3-html-twitter-widget').length ) {
					p3_twitter_widgets_get_tweets( '#contact-form ' );
					$p3_sliding_twitter_controls
				}
				p3_stop_throb();
				jQuery('#contact-form').slideToggle(delay);
				p3_contactform_loaded = true;
				jQuery('#referpage').val(window.location); // update hidden field location with page URL
				jQuery('#p3-nav-contact').unbind('click').click(function(){
					jQuery('#contact-form').slideToggle(500);
				});
				p3_validate_contact_form();
				jQuery('html,body').animate({scrollTop:jQuery('#header').height() + $blog_top_offset},1000);
			});
		}
JAVASCRIPT;

	} else {  

		// ajax contact form turned off
		echo "\n\n" . <<<JAVASCRIPT
		function p3_toggle_contactform(delay) {
			if (delay == undefined) delay = 500;
			jQuery('#contact-form').slideToggle(delay);
			jQuery('html,body').animate({scrollTop:jQuery('#header').height() + $blog_top_offset},1000);
		}		
JAVASCRIPT;

	 }
}


/* generic item throbbers for ajax */
echo "\n\n" . <<<JAVASCRIPT
function p3_start_throb( throb ) {
	if (window.p3_throbbing) window.clearInterval(p3_throbbing);
	window.p3_throbbing = setInterval(function(){
		throb.fadeTo(200, .5,  function(){
			throb.fadeTo(200, 1)
		});
	}, 400);
}

function p3_stop_throb() {
	window.clearInterval(p3_throbbing);
}
JAVASCRIPT;


/* ajaxed comments: main triggering function, clicking on an "add a comment" link */
if ( DO_COMMENTS ) {
	$cancel_reply = p3_get_option( 'translate_comments_cancel_reply' );
	$ajax_override = ( p3_test( 'comments_ajax_add', 'false' ) ) ? 'return true; // ajax override' : '';
	$added_comment = ( p3_test( 'reverse_comments', 'false' ) ) ? 'last' : 'first';
	echo "\n\n" . <<<JAVASCRIPT
	function p3_ajax_add_comment() {

		jQuery('.addacomment a').click(function(){

			$ajax_override

			// data about comment area, passed to callbacks
			var c = new Object;
			c.clicked_btn  = jQuery(this);
			c.permalink    = c.clicked_btn.attr('href');
			c.section      = c.clicked_btn.parents('.entry-comments');
			c.form_holder  = c.section.next();
			c.form_load_url     = c.permalink.replace('#', ' #');
			c.comments_load_url = c.permalink.replace('#addcomment', ' .comments-body-inner');		
			c.count_load_url    = c.permalink.replace('#addcomment', ' .comments-count');

			// form already loaded, show it
			if ( jQuery('.formcontainer', c.form_holder).length ) {
				c.form_holder.slideDown();

			// ajax load comment submission form
			} else {
				p3_start_throb(c.clicked_btn);
				c.form_holder.load(c.form_load_url, function(){
					p3_comment_form_ajax_loaded(c);
				});
			}

			return false; // disable normal click behavior
		});
	}


	/* when contact form is loaded via ajax: show form and bind ajax submit to it */
	function p3_comment_form_ajax_loaded(c) {
		c.form = jQuery('form', c.form_holder);
		p3_stop_throb();

		// add cancel reply button
		jQuery('input#submit', c.form)
			.after('<input class="cancel-reply" type="submit" value="{$cancel_reply}" />')
			.next()
			.click(function(){
				c.form_holder.slideUp();
				return false;
			});

		// show form
		c.form_holder.slideDown();

		// bind an ajax form submission
		c.form.submit(function(){
			p3_comment_form_ajax_submit(c);
			return false; // disable normal submission of form
		});
	}


	/* our custom ajax hijack of comment form submission */
	function p3_comment_form_ajax_submit(c) {
		p3_start_throb(jQuery('#submit', c.form));
		jQuery.ajax({
			type: "POST",
			url: c.form.attr('action'),
			data: c.form.serialize(),
			timeout: 6000,
			success: function(){
				p3_comment_ajax_update(c);
			},
			error: function(XMLHttpRequest, textStatus, errorThrown){
				setTimeout( function(){
					var comment = encodeURIComponent(jQuery('textarea', c.form).val());
					window.location.href = c.permalink+'-error-'+comment;
				}, 500 );
				// try to log error
				jQuery.post( '$p3_url/', { 
					'ajax_comment_error' : '1', 
					'XMLHttpRequest' : XMLHttpRequest, 
					'textStatus' : textStatus, 
					'errorThrown' : errorThrown 
				});
			}
		});
	}


	/* after commented submitted via ajax: update the comment area accordingly */
	function p3_comment_ajax_update(c) {
		// reload and show the comments area via ajax, also hide comment form
		c.section.children('.comments-body').load(c.comments_load_url, function(){

			// update the comments count
			jQuery('.comments-count', c.section).load(c.count_load_url);

			// show the comments, including new one, scrolled to bottom
			jQuery(this).slideDown(function(){

				// scroll to bottom of comment section
				jQuery(this).attr({scrollTop:jQuery(this).attr('scrollHeight')});

				// throb the new comment for two seconds
				p3_start_throb(jQuery('.comments-body-inner .p3comment:$added_comment', c.section));
				setTimeout(p3_stop_throb, 2000);

				// hide and remove comment form
				c.form_holder.slideUp(function(){
					jQuery('.formcontainer', this).remove();
				});
			});

			// set the comment count to active state
			jQuery(c.section).addClass('comments-count-active');

		});
	}


	/* handle redirects from ajax comment submission errors */
	function p3_ajax_cmt_submit_error() {
		if ( /#addcomment-error-/.test(window.location.hash) == false ) return;
		var comment = window.location.hash.replace('#addcomment-error-', '');
		jQuery('textarea').focus().val(comment.replace(/%0A/g, "\\n"));
		jQuery('#addcomment-error').show();
		jQuery(window).scrollTop(jQuery('#addcomment').offset().top);
	}
JAVASCRIPT;
}



/* menu center align */
if ( p3_test( 'nav_align', 'center' ) ) { 
echo "\n\n" . <<<JAVASCRIPT
function p3_align_menu_center() {
	nav = jQuery('#topnav');
	var nav_li_margin_right = parseFloat(jQuery('#topnav li').css('margin-right'));
	var nav_centering_amount = ( nav.parent().width() - ( nav.width() - nav_li_margin_right ) ) / 2;
	nav.css('margin-left', nav_centering_amount+'px').css('padding-left', 0);
}
JAVASCRIPT;
}


/* image protection */
if ( !p3_test( 'image_protection', 'none' ) ) {
	echo "\n\n" . <<<JAVASCRIPT
	function p3_image_protection() {
		jQuery('.entry-content img')
			.not('.exclude, .thumbnail, .attachment-thumbnail')
			.add('.p3-lightbox-gallery-thumbs img').each( function(){
				jQuery(this).bind('contextmenu', function(){return false;});
			});
	}
JAVASCRIPT;
}


/* built-in flash slideshow header */
if ( p3_using_default_flash_header() ) { 
	// calculate width of flashfader
	$masthead_width = p3_get_option( 'blog_width' );
	if ( p3_logo_narrows_masthead() ) { 
		$masthead_width = $masthead_width - p3_imagewidth( 'logo', NO_ECHO );
	}
	// calculate height of flashfader
	$masthead_height = p3_imageheight( 'masthead_image1', NO_ECHO );
	if ( p3_logo_masthead_sameline() ) {
		$masthead_height = p3_imageheight( 'logo', NO_ECHO );
	}
	// params
	$flashheader_xmlpath = p3_static_file_url( 'xml', NO_ECHO ) . p3_get_option('cache_buster' );
	if ( p3_test( 'flashheader_bg_color_bind', 'on' ) ) {
		$bgcolor = 'bgcolor: "' . p3_get_option( 'flashheader_bg_color' ) . '",';
		$wmode = 'opaque';
	} else {
		$wmode = 'transparent';
	}
	$flashheader_bgcolor = ( p3_test( 'flashheader_bg_color_bind', 'on' ) ) 
		? p3_get_option( 'flashheader_bg_color' ) : p3_get_option( 'body_bg_color' );

	echo "\n\n" . <<<JAVASCRIPT
	var flashheader_params = {
		FlashVars: "path2xml={$flashheader_xmlpath}",
		$bgcolor
		wmode: "$wmode"
	}
	swfobject.embedSWF(
		"{$p3_theme_url}/flash/flashheader.swf", 
		"masthead-image-do-flash", 
		"$masthead_width", 
		"$masthead_height", 
		"7.0.0", "{$p3_theme_url}/flash/expressinstall.swf", 
		false, flashheader_params, {styleclass: 'masthead-image'}
	);
	
JAVASCRIPT;
}


/* custom logo swf */
$logo_swf_url    = p3_imageurl( 'logo_swf', NO_ECHO );
$logo_img_width  = p3_imagewidth( 'logo', NO_ECHO );
$logo_img_height = p3_imageheight( 'logo', NO_ECHO );

if ( p3_test( 'logo_swf_switch', 'on' ) && p3_file_exists( 'logo_swf' ) ) echo "\n\n" . <<<JAVASCRIPT
// logo swf
swfobject.embedSWF(
	"{$logo_swf_url}", 
	"logo-img", 
	"{$logo_img_width}", 
	"{$logo_img_height}", 
	"7.0.0", 
	"{$p3_theme_url}/flash/expressinstall.swf",
	false,
	{wmode: "transparent"}
);
JAVASCRIPT;


/* custom flash movie header */
if ( p3_using_custom_flash_header() ) {
	$masthead_swf_url    = p3_imageurl( 'masthead_custom_flash', NO_ECHO );
	$masthead_img_width  = p3_imagewidth( 'masthead_image1', NO_ECHO );
	$masthead_img_height = p3_imageheight( 'masthead_image1', NO_ECHO );
	echo "\n\n" . <<<JAVASCRIPT
	swfobject.embedSWF(
		"{$masthead_swf_url}", 
		"masthead-image-do-flash", 
		"{$masthead_img_width}", 
		"{$masthead_img_height}", 
		"7.0.0", 
		"{$p3_theme_url}/flash/expressinstall.swf",
		false,
		{wmode: "transparent"}, {styleclass: 'masthead-image'}
	);
JAVASCRIPT;
}

/* random bio images */
if ( p3_using_random_biopics() ) {
	// build the array of available bio pics
	$c = 0;
	for ( $i = 1; $i <= MAX_BIO_IMAGES; $i++ ) {
		if ( p3_image_exists( 'biopic' . $i ) ) {
			$biopics_array .= "biopics[$c]='" . p3_imageurl( 'biopic' . $i, NO_ECHO ) . "';\n\t";
			$c++;
		}
	}
	$biopic_html = p3_imageHTML( 'biopic1', NO_ECHO );
	$p3_site_name = P3_SITE_NAME;
	echo "\n\n" . <<<JAVASCRIPT
	function p3_randomize_biopic() {
		var biopics = new Array();
		$biopics_array
		var biopic = Math.floor(Math.random()*(biopics.length));
		var src = biopics[biopic];
		document.write('<img id="biopic" src="'+biopics[biopic]+'" $biopic_html alt="$p3_site_name bio picture" class="bio-col" />');
	}
JAVASCRIPT;
}


/* random static masthead images */
if ( p3_test( 'masthead_display', 'random' ) )  {
	// build the arrays of available masthead pics/links
	$c = 0;
	for ( $i = 1; $i <= MAX_MASTHEAD_IMAGES; $i++ ) {
		if ( p3_image_exists( 'masthead_image' . $i ) ) {
			$mastheads_array .= "masthead_images[$c]='" . p3_imageurl( 'masthead_image' . $i, NO_ECHO ) . "';\n\t";
			if ( p3_test( 'masthead_image' . $i . '_linkurl' ) ) {
				$mastheads_links .= "masthead_links[$c]='" . p3_entered_url( 'masthead_image' . $i . '_linkurl' ) . "';\n\t";
			}
			$c++;
		}
	}	
	echo "\n\n" . <<<JAVASCRIPT
	function p3_randomize_masthead() {
		var masthead_images = new Array();
		var masthead_links  = new Array();
		$mastheads_array
		$mastheads_links
		var selected_image_index = Math.floor(Math.random()*(masthead_images.length));
		var masthead = jQuery('.masthead-image');
		document.write('<img src="'+masthead_images[selected_image_index]+'" class="random-masthead" />');
		jQuery(document).ready(function(){
			if ( masthead_links[selected_image_index] ) {
				jQuery('a', masthead).attr('href', masthead_links[selected_image_index]).removeClass('no-link');
			} else {
				jQuery('a', masthead).attr('href', '').addClass('no-link');
			}
		});
	}
JAVASCRIPT;
}


/* mp3 player */
if ( !p3_test( 'audioplayer', 'off' ) ) {
	
	// uploaded songs
	for ( $i = 1; $i <= MAX_AUDIO_FILE_UPLOADS; $i++ ) {
		if ( !p3_file_exists( 'audio' . $i ) ) continue;
		$song_url      = p3_imageurl( 'audio' . $i, NO_ECHO );
		$songs[] = $song_url;
	}

	// songs from 'music' folder, ftped
	if ( $ftped_songs = p3_get_ftped_audio_files() ) {
		foreach ( $ftped_songs as $song_path ) {
			$song_url = str_replace( P3_FOLDER_PATH, P3_FOLDER_URL, $song_path );
			$song_name = str_replace( P3_FOLDER_PATH . P3_MUSIC_DIR . '/', '', $song_path );
			$song_test = 'audio_player_include_ftped_' . str_replace( array( ' ', '.' ), '_', $song_name );
			if ( p3_test( $song_test, 'true' ) ) $songs[] = $song_url;
		}
	}

	// sanitize song urls for flash
	foreach ( $songs as $index => $unsanitized_url ) {
		$sanitized_url = str_replace( array( '/', ':', ' ' ), array( '%2F', '%3A', '%20' ), $unsanitized_url );
		$songs[$index] = $sanitized_url;
	}

	// we have songs
	if ( !empty( $songs ) ) {
		// color variables
		$player_color_options = array(
			'audioplayer_center_bg','audioplayer_text', 'audioplayer_left_bg', 'audioplayer_left_icon',
			'audioplayer_right_bg', 'audioplayer_right_icon', 'audioplayer_right_bg_hover',
			'audioplayer_right_icon_hover', 'audioplayer_slider','audioplayer_loader', 'audioplayer_track',
			'audioplayer_track_border' );
		foreach ( $player_color_options as $option ) {
			$option_name = str_replace( 'audioplayer_', '', $option );
			$colors[$option_name] = p3_flash_color( p3_get_option( $option ) );
		}
		extract( $colors );

		// other vars
		$auto_start = ( p3_test( 'audioplayer_autostart', 'yes' ) ) ? 'yes' : 'no';
		$loop       = ( p3_test( 'audioplayer_loop', 'yes' ) ) ? 'yes' : 'no';
		$song_list  = implode( '%2C', $songs );
		$swf_url    = P3_THEME_URL . '/flash/audioplayer.swf';

		echo <<< JAVASCRIPT
		function p3_audioplayer_embed() {
			var audio_flashvars = {
				playerID: 1, bg: $center_bg, leftbg: $left_bg, lefticon: $left_icon,
				rightbg: $right_bg, rightbghover: $right_bg_hover, righticonhover: $right_icon_hover,
				text: $text, slider: $slider, track: $track, border: $track_border,
				autostart: '$auto_start', loop: '$loop', soundFile: '$song_list'
			};
			swfobject.embedSWF(
				'$swf_url', 'audio-player', 290, 24, '8', 
				'$p3_theme_url/flash/expressinstall.swf', 
				audio_flashvars,
				{ wmode: 'transparent' }
			);
		}
JAVASCRIPT;

	// no songs, just notify
	} else {
		$warning = p3_get_msg( 'no_mp3s_for_audio_player');
		echo <<< JAVASCRIPT
		function p3_audioplayer_embed() {
			jQuery('#audio-player').html('$warning');
		}
JAVASCRIPT;
	}
} 

/* lightbox */
?>

var p3_lightbox_info = {
	img_loading      : '<?php p3_imageurl( 'lightbox_loading' ) ?>',
	img_btn_prev     : '<?php p3_imageurl( 'lightbox_prev' ) ?>',
	img_btn_next     : '<?php p3_imageurl( 'lightbox_next' ) ?>',
	img_btn_close    : '<?php p3_imageurl( 'lightbox_close' ) ?>',
	img_blank        : '<?php p3_imageurl( 'lightbox_blank' ) ?>',
	img_fadespeed    : <?php p3_option( 'lightbox_image_fadespeed' ) ?>,
	border_width     : '<?php p3_option( 'lightbox_border_width' ) ?>',
	resize_speed     : <?php p3_option( 'lightbox_resize_speed') ?>,
	fixed_navigation : <?php p3_option( 'lightbox_fixed_navigation' ) ?>,
	btns_opacity     : <?php echo str_replace( ',', '.', ( p3_get_option( 'lightbox_nav_btns_opacity' ) / 100 ) ) ?>,
	btn_fadespeed    : <?php p3_option( 'lightbox_nav_btns_fadespeed' ) ?>,
	overlay_color    : '<?php p3_option( 'lightbox_overlay_color' ) ?>',
	overlay_opacity  : <?php echo str_replace( ',', '.', ( p3_get_option( 'lightbox_overlay_opacity' ) / 100 ) ) ?>,
	translate_image  : '<?php p3_option( 'translate_lightbox_image' ) ?>',
	translate_of     : '<?php p3_option( 'translate_lightbox_of' ) ?>'
};
<?php include( 'js/p3lightbox.js' ); 


/* user-generated JS */
echo "\n\n/* user-js */\n" . strip_tags( p3_get_option( 'custom_js' ) );

// plugin hook
do_action( 'p3_post_customjs' );
?>